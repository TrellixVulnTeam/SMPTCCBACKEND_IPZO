#include <node.h>
#include <string>
#include <sstream>

namespace converter {

using v8::Exception;
using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Local;
using v8::Object;
using v8::String;
using v8::Value;

void Method(const FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = args.GetIsolate();

  if (args.Length() != 1) {
    isolate->ThrowException(Exception::TypeError(
        String::NewFromUtf8(isolate, "Expected to see one argument")));
    return;
  }

  if (!args[0]->IsString()) {
    isolate->ThrowException(Exception::TypeError(
        String::NewFromUtf8(isolate, "Expected to see a string")));
    return;
  }

  String::Utf8Value int64String(args[0]->ToString());
  std::stringstream int64Stream;
  int64Stream << *int64String;
  int64_t input = 0;
  int64Stream >> input;
  uint64_t output = input;

  args.GetReturnValue().Set(String::NewFromUtf8(isolate, std::to_string(output).c_str()));
}

void init(Local<Object> exports) {
  NODE_SET_METHOD(exports, "convert", Method);
}

NODE_MODULE(addon, init)

}

